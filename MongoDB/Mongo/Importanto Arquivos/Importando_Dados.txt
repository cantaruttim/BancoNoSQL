use Import_Dados // Importando dados

db.teste.insert({Nome: 'X'})
// cd "Program Files" > MongoDB > Server > 6.0 > bin

db.movie.find()
db.actor.find()

// para renomear um campo

db.movie.update({}, {$rename: {"year": "ano_lancamento"}}, false, true)
db.movie.find()

// FUNÇÕES DE GRUPO:
// count

db.movie.count() // 62058
db.movie.countDocuments() // "62058" : Retorna apenas documento preenchido
db.movie.find().count() // 62058 > procura depois conta

db.movie.aggregate({$count: "filmes listados"}) // temos um operador chamado $count 

// utilizando a função grupo para realizar agrupamento.
db.movie.aggregate(
    
    {$group: { _id: null, // aqui estou agrupando por nenhum critério, pois o id é nulo
               countagem: {$count: {} } // contagem seria uma label
            }}
)

db.movie.aggregate(
    
    {$group: { _id: "tagline", 
               countagem_títulos: {$count: {} } // contagem seria uma label
            }}
)

// contando com critério de agrupamento
// em ordem descrente do ano que tem a maior quantidade de filmes para a menor quantidade
db.movie.aggregate(
    
    {$group: { _id: "$ano_lancamento", 
               countagem_por_ano: {$count: {} } // contagem seria uma label
            }},
            {$sort: {contagem_por_ano: -1} }
)

// agrupando pelo ano lancamento e agrupando pelo _id
db.movie.aggregate(
    
    {$group: { _id: "$ano_lancamento", 
               countagem_por_ano: {$count: {} } // contagem seria uma label
            }},
            {$sort: {_id: -1} }
)

db.movie.aggregate(
    
    {$group: { _id: "$genre", 
               contagem_por_genero: {$count: {} } // contagem seria uma label
            }},
            {$sort: {contagem_genero: -1} }
)

// mostrando o tipo de gênero existente dentro do array => visualização!
db.movie.aggregate(
    
    {$group: { _id: { gênero: "$genre"}, 
               contagem_por_genero: {$count: {} } // contagem seria uma label
            }},
            {$sort: {contagem_genero: -1} }
)

// filtrando por país 
db.movie.aggregate(
    
    {$group: { _id: { país: "$countries"}, 
               contagem_por_genero: {$count: {} } // contagem seria uma label
            }},
            {$sort: {contagem_por_pais: -1} }
)

// podemos adicionar filtros

db.movie.aggregate(
    {$match: {"countries": /braz/i} },
    {$group: { _id: { país: "$countries"}, 
               contagem_por_pais: {$count: {} } // contagem seria uma label
            }},
            {$sort: {contagem_por_pais: -1} }
)

// contando o menor e o maior ano de lançamento de filmes

db.movie.aggregate(
    {$group: { _id: null, 
               contagem : {$count: {} }, // contagem seria uma label
                menor_ano : {$min: "$ano_lancamento"},
                maior_ano : {$max:"$ano_lancamento"}
}} )


db.movie.aggregate(
    {$group: { _id: null, 
               contagem : {$count: {} }, // contagem seria uma label
                menor_votação : {$min: "$votes"},
                maior_votação : {$max:"$votes"},
                media_votação : {$avg: "$votes"},
                soma_votação : {$sum: "$votes"}
}} )

// observe que temos a soma e a média como zero e nullo
// precisamos descubrir o que é diferente de nulo
// cada voto é convertido para inteiro assim podemos realizar a somatória e a média dos valores


db.movie.find({votes: {$ne : null}}).forEach ( function (doc) {
    doc.votes = parseInt(doc.votes) ;
    db.movie.save(doc) })

// agrupando por mais de um campo - por país e gênero
db.movie.aggregate(
    {$group: { _id: {país:  "$countries" , gen: "$genre"},
              contagem_pais_genero : {$count: {} } } },
    {$project : {gênero: "$_id.gen" , país: "$_id.país" ,       
                 contagem_pais_genero : 1, _id: 0 } },
              {$sort: {contagem_pais_genero : -1 } } ) 


// filtro no agrupamento
db.movie.aggregate(
    {$match: {"countries" : /USA/i}},
    {$group: { _id: {país:  "$countries" , gen: "$genre"},
              contagem_pais_genero : {$count: {} } } },
    {$match: {contagem_pais_genero : {$gte: 5000} } }, 
    {$project : {gênero: "$_id.gen" , país: "$_id.país" ,       
                 contagem_pais_genero : 1, _id: 0 } },
              {$sort: {contagem_pais_genero : -1 } } ) 

// tamanho de elenco 
db.movie.aggregate( [
    {$project : {tamanho_elenco: {$size: "$actors" }}},
    {$group: {_id: "$tamanho_elenco",
              count_tamanho: {$count: {}}}},
    {$sort: {_id: -1}} ]) 


// ATIVIDADE 3 (Mongo):

// a) Mostre a contagem de filmes por Diretor. Mostre o nome(s) do(s) diretor(es) quando tiverem no máximo 2

db.movie.find()

db.movie.aggregate(
    
    {$group: { _id: { diretor: "$directors"}, 
               contagem_por_diretor: {$count: {} } 
            }},
            {$match: {contagem_por_diretor : {$lte: 2} } }, // mostrando no máximo 2 diretores
            {$sort: {contagem_genero: -1} }
)

// correção

db.movie.aggregate ([
  { $match: {directors: {$ne: null}}}, 
  { $group : { _id: {direcao: "$directors"},  
              contagem_direcao : {$count : {} } } },
{$project : {Direção: {$cond : {"if" : {"$eq": [{$size: "$_id.direcao" }, 1] }, // concatena se tiver mais de um elemento no vetor
                               "then":  { "$arrayElemAt"  : ["$_id.direcao", 0]  },
            "else": {"$concat": [ { "$arrayElemAt" : ["$_id.direcao", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.direcao", 1]  } ] } }}, 
              contagem_direcao: 1, _id: 0} },
            {$sort : { contagem_direcao: -1  } } ])

// b) Mostre a contagem de filmes por país e idioma

db.movie.aggregate([
    {$group: { _id: {país:  "$countries" , idioma: "$languages"},
              contagem_pais_idioma : {$count: {} } } },
              {$project : { país: "$_id.país", idioma : "$_id.idioma" ,
              contagem_país_idioma: 1, _id : 0 } },
              {$sort: {contagem_pais_idioma : -1 } } ]) 

// correção
// o país e idioma estão dentro do vetor
 db.movie.aggregate ([
  { $group : { _id: {país: "$countries",idioma: "$languages"}
              contagem_pais_idioma : {$count : {} } } },
             {$sort : { contagem_pais_idioma: -1  } },
{$project :{Pais: "$_id.país", Idioma: "$_id.idioma", contagem_pais_idioma: 1, _id: 0} } ]) 


// c) Mostre a quantidade de filmes por gênero em que atuou o ator Robert de Niro.

db.movie.find()

db.movie.aggregate(
    
    {$match: {"actors" : /robert de niro/i}},
    {$group: {_id : {gênero : "$genre"},
        contagem_por_genero: {$count: {} }} },
        {$sort: {contagem_por_genero : -1 } }  )
        
// correção

db.movie.find({actors: /robert de niro/i}) // busca na base se existe Robert de Niro na base
db.movie.aggregate ([
  {$match: {actors: /robert de niro/i}},  // busca dentro do vetor
  { $group : { _id: {genero: "$genre"},  
              contagem_genero : {$count : {} } } },
             {$sort : { contagem_genero: -1  } } ])  // exibe o conteúdo do vetor mas não extrai o conteudo


// tirando o texto do vetor, combinando até 3 com case
db.movie.aggregate ([
  {$match: {actors: /robert de niro/i}},  
  { $group : { _id: {genero: "$genre"},  
              contagem_genero : {$count : {} } } },
{$project : {Gênero: 
              {$switch:   
{ branches: [ { case: {"$eq": [{$size: "$_id.genero" }, 1] }, // testa o tamanho do vetor
                then:  { "$arrayElemAt"  : ["$_id.genero", 0]  } }, // extrai o conteúdo do elemento 0
              { case: {"$eq": [{$size: "$_id.genero" }, 2] },
                then: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  } ] } }, // concatena o conteúdo do 0 com o 1
               { case: {"$eq": [{$size: "$_id.genero" }, 3] },
                then: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  },  "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 2]  } ] } } // concatena o conteúdo do 0, 1 e 2
            ],
            default: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  },  "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 2]  }," + outros" ] } }} , contagem_genero: 1, _id: 0} },
           {$sort : { contagem_genero: -1  } } ])

// d) Mostre o total de votos por Gênero de filme com mais de 10 mil votos -- correção

// como converter o valor de formato americano para a nossa

db.movie.aggregate([
   { $addFields: { // a transformação vaipara um novo campo votação
           votação: { $convert: { 
               input: { $reduce: { input: { $split: ['$votes', ','] }, initialValue: '',
                   in: { $concat: ['$$value', '$$this'] } } }, 
                   to: "string", 
                   onError: 0 , 
                   onNull: null} }
               }
   }
 ]).forEach ( function (doc)
  {db.movie.save(doc) } )


// verificando o datatype de um campo -- votação é string
db.movie.aggregate ([
  {"$project": {tipodado : {$type: "votes" } } }
])


// visualizando votes e votação
db.movie.find().project({votes:1, votação:1, _id:0})
// converter string para inteiro
db.movie.find({votação: {$ne: ""}}).count() // 62058 não são nulos
db.movie.find({votação: {$eq: null}).count() // 2 são nulos
// convertendo para inteiro
db.movie.find({votação: {$ne: ""}}).forEach ( function (doc) 
  { doc.votação = parseInt (doc.votação) ;
    db.movie.save(doc) } )

//verificando   
db.movie.aggregate ([
{$group : {_id: null ,
           contagem: {$count : {}} ,
           maior_votação: {$max: "$votação"},
           menor_votação: {$min: "$votação"},
           media_votação: {$avg: "$votação"},
           total_votos : {$sum: "$votação" }} }  ] )

// 2 docs com NaN : not a number
db.movie.find({votação:NaN})
db.movie.updateMany({votação:NaN}, {$set: {votação: null}} )
// finalmente a consulta
db.movie.aggregate (
  { $group : { _id: {genero: "$genre"},  
              soma_genero : {$sum : "$votação" } } },
{$project : {Gênero: {$cond : {"if" : {"$eq": [{$size: "$_id.genero" }, 1] },
                               "then":  { "$arrayElemAt"  : ["$_id.genero", 0]  },
            "else": {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  } ] } }}, 
              soma_genero: 1, _id: 0} },
 {$match: {soma_genero : {$gte: 1000000}}},
            {$sort : { soma_genero: -1  } } )

// usando case
db.movie.aggregate ([
  { $group : { _id: {genero: "$genre"},  
              soma_genero : {$sum : "$votação" } } },
{$project : {Gênero: 
              {$switch:   
{ branches: [ { case: {"$eq": [{$size: "$_id.genero" }, 1] },
                then:  { "$arrayElemAt"  : ["$_id.genero", 0]  } },
              { case: {"$eq": [{$size: "$_id.genero" }, 2] },
                then: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  } ] } },
               { case: {"$eq": [{$size: "$_id.genero" }, 3] },
                then: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  },  "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 2]  } ] } }
            ],
            default: {"$concat": [ { "$arrayElemAt" : ["$_id.genero", 0]  }, "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 1]  },  "/", 
                                  { "$arrayElemAt" : ["$_id.genero", 2]  }," + outros" ] } }} , soma_genero: 1, _id: 0} },
   {$match: {soma_genero : {$gte: 1000000}}},
            {$sort : { soma_genero: -1  } } ])



// d) Mostre o total de votos por Gênero de filme com mais de 10 mil votos (minha resolução)

db.movie.aggregate(
    
    {$group: {_id : {gênero : "$genre", votos : "$votes"},
        contagem_votos: {$count: {} }} },
       // {$match: {contagem_votos : {$gte: 10000} } },
        {$sort: {contagem_votos : -1 } }  
)

// não temos então uma quantidade de votos igual ou superior a 10k. 


// e) Mostre os 10 filmes com maior elenco, título e quantidade do elenco

db.movie.aggregate([
    // {$project : {tamanho_elenco: {$size: "$actors" }}},
    {$group: {_id: {título_filme : "$title", elenco: "$elenco" },
        contagem_elenco: {$count: {} } } },
        
    {$project : { título_filme: "$_id.título_filme", elenco : "$_id.elenco" ,
              contagem_elenco: 1, _id : 1 } },
    {$sort: {contagem_elenco: -1} }
    
    
]).limit(1000)

// correção

db.movie.aggregate( [
    {$project : {tamanho_elenco: {$size: "$actors" }}},
    {$group: {_id: "$tamanho_elenco",
              count_tamanho: {$count: {}}}},
    {$sort: {_id: -1}} ]) 
 
 db.movie.aggregate([
     {$project : {title: 1, tamanho_elenco: {$size: "$actors" }, _id:0 }
    {$sort: {tamanho_elenco: -1}},
    {$limit: 1000} 
])


// Aula do dia 27 de outubro de 2022
db.actor.find()

db.actor.find({name: /montenegro/i})
db.actor.count()  // 297705


// para saber o datatype -> string
db.actor.aggregate( [ 
        { "$project": { "dataType": {  "$type": "$date_of_birth"  } } } ])



// $type : date-9, timestamp-17, string-2, double-1 , nulo-10
db.actor.find({date_of_birth : {$type: 2 }}).count() //295908
db.actor.find({date_of_birth : {$type: 10 }}).count()
db.actor.find({date_of_birth : {$ne: null }}) //297705


// levantamento

// Neste primeiro comando filtramos somente o que é o tipo 2 (string) e verificamos se o comprimento é 10 (AAA / MM / DD)

db.actor.find({date_of_birth : {$type: 2 }, 
    "$expr": { "$eq": [ { "$strLenCP": "$date_of_birth" }, 10 ] } ).count() //100 029

// aqui filtramos para saber quantos apresentam o '-' na data
    
db.actor.find({date_of_birth : {$type: 2 }, 
    "$expr": { "$eq": [ { "$strLenCP": "$date_of_birth" }, 10 ] } , date_of_birth: /-/i } ).count()  // com o traço 99975


// vamos procurar se o tamanho da string é 4 (para encontrarmos somente o ano)
// e encontramos a data de nascimento por escrito

db.actor.aggregate([
    {$match: { date_of_birth: {$type: 2 } } },   
    {$project: { ano_nascto : {
                        $substr: ["$date_of_birth", 0, 4] } , date_of_birth: 1} },
    {$match: { ano_nascto: { $in: [ /a/i, /e/i,/i/i,/o/i,/u/i, /bc/i ] }  }} ] ) //145



/***** CONVERSÃO *****/
// NASCIMENTO
// 1o converte - data nascimento que tem 10 caracteres está no formato "AAAA-MM-DD" --93 mil convertidos
db.actor.find({ date_of_birth : {$type: 2 }, 
    "$expr": { "$eq": [ { "$strLenCP": "$date_of_birth" }, 10 ] } ,
    date_of_birth: /-/i } ).forEach(function(doc) { 
    doc.date_of_birth = ISODate(doc.date_of_birth);
    print(doc.date_of_birth)
    db.actor.save(doc); 
    })
db.actor.find({ date_of_birth : {$type: 9 }})  // 99975 - depois do tratamento abaixo 108418






